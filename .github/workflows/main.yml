name: C/C++ CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  reuse:
    name: 🚨 REUSE Compliance
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: fsfe/reuse-action@v5

  c-lint:
    name: 🚨 C lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: reviewdog/action-cpplint@master
        env:
          REVIEWDOG_GITHUB_API_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          reporter: github-pr-check
          targets: --recursive src
          level: warning
          flags: --linelength=120 # Optional
          filter: "-readability/braces\
            ,-readability/casting\
            ,-whitespace/comma\
            ,-whitespace/braces\
            ,-whitespace/comments\
            ,-whitespace/indent\
            ,-whitespace/newline\
            ,-whitespace/operators\
            ,-whitespace/parens\
            ,-whitespace/tab\
            " # Optional
        #    - name: Fail fast?!
        #      if: steps.linter.outputs.checks-failed > 0
        #      run: |
        #        echo "😤 Some files failed the C linting checks!"

  linux-test:
    name: 🐧 Linux check tests (gcc and clang)
    needs: [reuse, c-lint]
    strategy:
      matrix:
        command: [CC=gcc, CC=clang]
      fail-fast: false
    runs-on: "ubuntu-latest"
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    - name: Build GNU/Linux ${{ matrix.command }}
      run: |
        make ${{ matrix.command }}
        time ./fastalloc32_test

  win-native-test:
    name: 🪟 Windows native test
    needs: [reuse, c-lint]
    runs-on: "windows-latest"
    steps:
      - uses: actions/checkout@v4
      - name: Test on native windows
        run: |
          make CC=gcc CFLAGS="-g"
          .\fastalloc32_test

  osx-native-test:
    name: 🍎 OSX native test
    needs: [reuse, c-lint]
    runs-on: "macos-latest"
    steps:
      - uses: actions/checkout@v4
      - name: Test on native Apple/OSX
        run: |
          make CC=clang CFLAGS="-g"
          time ./fastalloc32_test

  arm32-test:
    name: 🦾 ARM32 build test
    needs: [reuse, c-lint]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: pguyot/arm-runner-action@v2
        with:
          commands: |
            make CC=gcc CFLAGS="-g"
            ./fastalloc32_test

  js-build-check:
    name: 🐯 NodeJS WASM test
    needs: [reuse, c-lint]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [20.18.0]
    env:
      EM_VERSION: 4.0.1
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
      - uses: mymindstorm/setup-emsdk@v14
        with:
          version: ${{ env.EM_VERSION }}
      - name: Build Wasm
        run: |
          make wasm
        env:
          EMSCRIPTEN: ${{ env.EMSDK }}/upstream/emscripten
